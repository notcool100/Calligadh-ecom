trigger:
  branches:
    include:
      - dev

pool:
  name: 'Astro'

variables:
  nodeVersion: '24.x'
  stagingPath: '/var/www/calligadh_dev'

stages:
- stage: BuildFrontend 
  displayName: 'Build Frontend'
  jobs:
  - job: BuildFrontendJob
    displayName: 'Build Next.js Frontend'
    steps:
    - checkout: self
      displayName: 'Checkout Code'
    
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - task: DownloadSecureFile@1
      name: FrontendEnv
      inputs:
        secureFile: 'envex'
      displayName: 'Download Frontend Environment File'
    
    - script: |
        cp $(FrontendEnv.secureFilePath) .env
        echo "Frontend environment file copied successfully"
      displayName: 'Setup Frontend Environment'
    
    - script: |
        echo "Installing frontend dependencies"
        npm install --legacy-peer-deps
      displayName: 'Install Frontend Dependencies'
    
    - script: |
        echo "Building frontend application (includes Prisma generate)"
        npm run build
      displayName: 'Build Frontend Application'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend_staging.tar.gz'
        replaceExistingArchive: true
      displayName: 'Archive Frontend Files'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend_staging.tar.gz'
        ArtifactName: 'frontend'
        publishLocation: 'Container'
      displayName: 'Publish Frontend Artifact'

- stage: BuildBackend 
  displayName: 'Build Backend'
  dependsOn: BuildFrontend
  jobs:
  - job: BuildBackendJob
    displayName: 'Build Node.js Backend'
    steps:
    - checkout: self
      displayName: 'Checkout Code'
    
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    - task: DownloadSecureFile@1
      name: BackendEnv
      inputs:
        secureFile: 'envex'
      displayName: 'Download Backend Environment File'
    
    - script: |
        cd server
        cp $(BackendEnv.secureFilePath) .env
        echo "Backend environment file copied successfully"
      displayName: 'Setup Backend Environment'
    
    - script: |
        cd server
        echo "Installing backend dependencies"
        npm install --legacy-peer-deps
      displayName: 'Install Backend Dependencies'
    
    - script: |
        cd server
        echo "Generating Prisma client for backend"
        npx prisma generate
      displayName: 'Generate Prisma Client'
    
    - script: |
        cd server
        echo "Backend installation completed. Server structure:"
        ls -la
        echo -e "\nBackend ready to run with: npm start"
      displayName: 'Verify Backend Installation'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/server'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend_staging.tar.gz'
        replaceExistingArchive: true
      displayName: 'Archive Backend Files'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend_staging.tar.gz'
        ArtifactName: 'backend'
        publishLocation: 'Container'
      displayName: 'Publish Backend Artifact'

- stage: PreDeploy
  displayName: 'Pre-Deployment Checks'
  dependsOn: 
    - BuildFrontend
    - BuildBackend
  jobs:
  - job: PreDeployChecks
    displayName: 'Run Pre-Deployment Checks'
    steps:
    - script: |
        echo "Running pre-deployment checks..."
        echo "All build stages completed successfully"
        echo "Ready for deployment to Staging"
      displayName: 'Pre-Deployment Validation'

- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: PreDeploy
  condition: succeeded('PreDeploy')
  jobs:
  - job: DeployFrontendProd
    displayName: 'Deploy Frontend to Staging'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'frontend'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
        # Create frontend Staging directory
        sudo mkdir -p $(stagingPath)/frontend-staging
        sudo chown -R $(whoami):$(whoami) $(stagingPath)/frontend-staging
        echo "Created frontend Staging directory"
      displayName: 'Create Frontend Directory'

    - script: |
        # Extract new frontend build
        echo "Debugging artifact extraction..."
        echo "Artifacts directory contents:"
        ls -la $(System.ArtifactsDirectory)/
        echo "Frontend artifact contents:"
        ls -la $(System.ArtifactsDirectory)/frontend/
        
        # Extract frontend build
        tar -xzf $(System.ArtifactsDirectory)/frontend/frontend_staging.tar.gz -C $(stagingPath)/frontend-staging
        echo "Frontend extracted to $(stagingPath)/frontend-staging"
        
        # Set proper permissions
        chmod -R 755 $(stagingPath)/frontend-staging
      displayName: 'Extract Frontend Build'

    - script: |
        # Install PM2 if not present
        if ! command -v pm2 &> /dev/null; then
          npm install -g pm2
          echo "PM2 installed"
        fi
        
        # Install Staging dependencies
        cd $(stagingPath)/frontend-staging
        if [ -f "package-lock.json" ]; then
          npm ci --omit=dev
          echo "Staging dependencies installed via npm ci"
        else
          npm install --omit=dev
          echo "Staging dependencies installed via npm install"
        fi
      displayName: 'Install Dependencies'

    - script: |
        # Setup environment file for frontend
        cd $(stagingPath)/frontend-staging
        if [ ! -f ".env.local" ]; then
          echo "Creating frontend .env.local file..."
          echo "# API Configuration" > .env.local
          echo "NEXT_PUBLIC_API_URL=http://localhost:5001" >> .env.local
          echo "NEXT_PUBLIC_FRONTEND_URL=http://localhost:4000" >> .env.local
          echo "" >> .env.local
          echo "# App Configuration" >> .env.local
          echo "NEXT_PUBLIC_APP_NAME=\"AstroFinance\"" >> .env.local
          echo "NEXT_PUBLIC_APP_VERSION=\"1.0.0\"" >> .env.local
          echo "" >> .env.local
          echo "# Environment" >> .env.local
          echo "NODE_ENV=Staging" >> .env.local
          echo "PORT=4000" >> .env.local
          echo "" >> .env.local
          echo "# Features" >> .env.local
          echo "NEXT_PUBLIC_ENABLE_ANALYTICS=false" >> .env.local
          echo "NEXT_PUBLIC_DEBUG_MODE=false" >> .env.local
          echo "Frontend .env.local file created"
        else
          echo "Frontend .env.local file already exists"
        fi
      displayName: 'Setup Frontend Environment'

    - script: |
        # Restart frontend with PM2
        cd $(stagingPath)/frontend-staging
        echo "Starting frontend deployment..."
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        # Stop existing frontend if running
        pm2 delete frontend-staging 2>/dev/null || true
        
        # Start frontend with PM2
        pm2 start npm --name "frontend-staging" -- start -- --port 4000
        pm2 save
        pm2 startup 2>/dev/null || true
        echo "Frontend restarted with PM2 on port 4000"
        
        # Show PM2 logs for debugging
        echo "PM2 status after frontend start:"
        pm2 list
      displayName: 'Restart Frontend with PM2'

  - job: DeployBackendProd
    displayName: 'Deploy Backend to Staging'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'backend'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
        # Create backend Staging directory
        sudo mkdir -p $(stagingPath)/backend-staging
        sudo chown -R $(whoami):$(whoami) $(stagingPath)/backend-staging
        echo "Created backend Staging directory"
      displayName: 'Create Backend Directory'

    - script: |
        # Extract new backend build
        echo "Debugging backend artifact extraction..."
        echo "Artifacts directory contents:"
        ls -la $(System.ArtifactsDirectory)/
        echo "Backend artifact contents:"
        ls -la $(System.ArtifactsDirectory)/backend/
        
        # Extract backend build
        tar -xzf $(System.ArtifactsDirectory)/backend/backend_staging.tar.gz -C $(stagingPath)/backend-staging
        echo "Backend extracted to $(stagingPath)/backend-staging"
        
        # Set proper permissions
        chmod -R 755 $(stagingPath)/backend-staging
      displayName: 'Extract Backend Build'

    - script: |
        # Install PM2 if not present
        if ! command -v pm2 &> /dev/null; then
          npm install -g pm2
          echo "PM2 installed"
        fi
        
        # Install Staging dependencies
        cd $(stagingPath)/backend-staging
        if [ -f "package-lock.json" ]; then
          npm ci --omit=dev
          echo "Staging dependencies installed via npm ci"
        else
          npm install --omit=dev
          echo "Staging dependencies installed via npm install"
        fi
      displayName: 'Install Dependencies'

    - script: |
        # Setup environment file for backend
        cd $(stagingPath)/backend-staging
        if [ ! -f ".env" ]; then
          echo "Creating backend .env file..."
          echo "# Database" > .env
          echo "DATABASE_URL=\"postgresql://username:password@localhost:5432/astrofinance\"" >> .env
          echo "" >> .env
          echo "# Server" >> .env
          echo "PORT=5001" >> .env
          echo "NODE_ENV=Staging" >> .env
          echo "" >> .env
          echo "# JWT" >> .env
          echo "JWT_SECRET=\"your-jwt-secret-key-here\"" >> .env
          echo "JWT_EXPIRES_IN=\"24h\"" >> .env
          echo "" >> .env
          echo "# API" >> .env
          echo "API_BASE_URL=\"http://localhost:5001\"" >> .env
          echo "FRONTEND_URL=\"http://localhost:4000\"" >> .env
          echo "" >> .env
          echo "# Email (if needed)" >> .env
          echo "SMTP_HOST=\"\"" >> .env
          echo "SMTP_PORT=\"\"" >> .env
          echo "SMTP_USER=\"\"" >> .env
          echo "SMTP_PASS=\"\"" >> .env
          echo "" >> .env
          echo "# Other services" >> .env
          echo "REDIS_URL=\"redis://localhost:6379\"" >> .env
          echo "Backend .env file created"
        else
          echo "Backend .env file already exists"
        fi
      displayName: 'Setup Backend Environment'

    - script: |
        # Restart backend with PM2
        cd $(stagingPath)/backend-staging
        echo "Starting backend deployment..."
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Environment file contents:"
        cat .env || echo "No .env file found"
        
        # Stop existing backend if running
        pm2 delete backend-staging 2>/dev/null || true
        
        # Start backend with PM2
        pm2 start npm --name "backend-staging" -- start
        pm2 save
        pm2 startup 2>/dev/null || true
        echo "Backend restarted with PM2 on port 5001"
        
        # Show PM2 logs for debugging
        echo "PM2 status after backend start:"
        pm2 list
      displayName: 'Restart Backend with PM2'